// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ari.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ari_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ari_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ari_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ari_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ari_2eproto;
namespace ari {
class AriConfig;
struct AriConfigDefaultTypeInternal;
extern AriConfigDefaultTypeInternal _AriConfig_default_instance_;
}  // namespace ari
PROTOBUF_NAMESPACE_OPEN
template<> ::ari::AriConfig* Arena::CreateMaybeMessage<::ari::AriConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ari {

enum AriConfig_IP_VERSION : int {
  AriConfig_IP_VERSION_NONE = 0,
  AriConfig_IP_VERSION_V4 = 1,
  AriConfig_IP_VERSION_V6 = 2,
  AriConfig_IP_VERSION_AriConfig_IP_VERSION_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AriConfig_IP_VERSION_AriConfig_IP_VERSION_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AriConfig_IP_VERSION_IsValid(int value);
constexpr AriConfig_IP_VERSION AriConfig_IP_VERSION_IP_VERSION_MIN = AriConfig_IP_VERSION_NONE;
constexpr AriConfig_IP_VERSION AriConfig_IP_VERSION_IP_VERSION_MAX = AriConfig_IP_VERSION_V6;
constexpr int AriConfig_IP_VERSION_IP_VERSION_ARRAYSIZE = AriConfig_IP_VERSION_IP_VERSION_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AriConfig_IP_VERSION_descriptor();
template<typename T>
inline const std::string& AriConfig_IP_VERSION_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AriConfig_IP_VERSION>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AriConfig_IP_VERSION_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AriConfig_IP_VERSION_descriptor(), enum_t_value);
}
inline bool AriConfig_IP_VERSION_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AriConfig_IP_VERSION* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AriConfig_IP_VERSION>(
    AriConfig_IP_VERSION_descriptor(), name, value);
}
// ===================================================================

class AriConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ari.AriConfig) */ {
 public:
  inline AriConfig() : AriConfig(nullptr) {}
  ~AriConfig() override;
  explicit PROTOBUF_CONSTEXPR AriConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AriConfig(const AriConfig& from);
  AriConfig(AriConfig&& from) noexcept
    : AriConfig() {
    *this = ::std::move(from);
  }

  inline AriConfig& operator=(const AriConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AriConfig& operator=(AriConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AriConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AriConfig* internal_default_instance() {
    return reinterpret_cast<const AriConfig*>(
               &_AriConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AriConfig& a, AriConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AriConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AriConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AriConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AriConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AriConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AriConfig& from) {
    AriConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AriConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ari.AriConfig";
  }
  protected:
  explicit AriConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AriConfig_IP_VERSION IP_VERSION;
  static constexpr IP_VERSION NONE =
    AriConfig_IP_VERSION_NONE;
  static constexpr IP_VERSION V4 =
    AriConfig_IP_VERSION_V4;
  static constexpr IP_VERSION V6 =
    AriConfig_IP_VERSION_V6;
  static inline bool IP_VERSION_IsValid(int value) {
    return AriConfig_IP_VERSION_IsValid(value);
  }
  static constexpr IP_VERSION IP_VERSION_MIN =
    AriConfig_IP_VERSION_IP_VERSION_MIN;
  static constexpr IP_VERSION IP_VERSION_MAX =
    AriConfig_IP_VERSION_IP_VERSION_MAX;
  static constexpr int IP_VERSION_ARRAYSIZE =
    AriConfig_IP_VERSION_IP_VERSION_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  IP_VERSION_descriptor() {
    return AriConfig_IP_VERSION_descriptor();
  }
  template<typename T>
  static inline const std::string& IP_VERSION_Name(T enum_t_value) {
    static_assert(::std::is_same<T, IP_VERSION>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function IP_VERSION_Name.");
    return AriConfig_IP_VERSION_Name(enum_t_value);
  }
  static inline bool IP_VERSION_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      IP_VERSION* value) {
    return AriConfig_IP_VERSION_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
    kAcceptCountFieldNumber = 2,
    kWorkerCountFieldNumber = 3,
    kIpVersionFieldNumber = 4,
  };
  // int32 port = 1;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // int32 acceptCount = 2;
  void clear_acceptcount();
  int32_t acceptcount() const;
  void set_acceptcount(int32_t value);
  private:
  int32_t _internal_acceptcount() const;
  void _internal_set_acceptcount(int32_t value);
  public:

  // int32 workerCount = 3;
  void clear_workercount();
  int32_t workercount() const;
  void set_workercount(int32_t value);
  private:
  int32_t _internal_workercount() const;
  void _internal_set_workercount(int32_t value);
  public:

  // .ari.AriConfig.IP_VERSION ipVersion = 4;
  void clear_ipversion();
  ::ari::AriConfig_IP_VERSION ipversion() const;
  void set_ipversion(::ari::AriConfig_IP_VERSION value);
  private:
  ::ari::AriConfig_IP_VERSION _internal_ipversion() const;
  void _internal_set_ipversion(::ari::AriConfig_IP_VERSION value);
  public:

  // @@protoc_insertion_point(class_scope:ari.AriConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t port_;
    int32_t acceptcount_;
    int32_t workercount_;
    int ipversion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ari_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AriConfig

// int32 port = 1;
inline void AriConfig::clear_port() {
  _impl_.port_ = 0;
}
inline int32_t AriConfig::_internal_port() const {
  return _impl_.port_;
}
inline int32_t AriConfig::port() const {
  // @@protoc_insertion_point(field_get:ari.AriConfig.port)
  return _internal_port();
}
inline void AriConfig::_internal_set_port(int32_t value) {
  
  _impl_.port_ = value;
}
inline void AriConfig::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:ari.AriConfig.port)
}

// int32 acceptCount = 2;
inline void AriConfig::clear_acceptcount() {
  _impl_.acceptcount_ = 0;
}
inline int32_t AriConfig::_internal_acceptcount() const {
  return _impl_.acceptcount_;
}
inline int32_t AriConfig::acceptcount() const {
  // @@protoc_insertion_point(field_get:ari.AriConfig.acceptCount)
  return _internal_acceptcount();
}
inline void AriConfig::_internal_set_acceptcount(int32_t value) {
  
  _impl_.acceptcount_ = value;
}
inline void AriConfig::set_acceptcount(int32_t value) {
  _internal_set_acceptcount(value);
  // @@protoc_insertion_point(field_set:ari.AriConfig.acceptCount)
}

// int32 workerCount = 3;
inline void AriConfig::clear_workercount() {
  _impl_.workercount_ = 0;
}
inline int32_t AriConfig::_internal_workercount() const {
  return _impl_.workercount_;
}
inline int32_t AriConfig::workercount() const {
  // @@protoc_insertion_point(field_get:ari.AriConfig.workerCount)
  return _internal_workercount();
}
inline void AriConfig::_internal_set_workercount(int32_t value) {
  
  _impl_.workercount_ = value;
}
inline void AriConfig::set_workercount(int32_t value) {
  _internal_set_workercount(value);
  // @@protoc_insertion_point(field_set:ari.AriConfig.workerCount)
}

// .ari.AriConfig.IP_VERSION ipVersion = 4;
inline void AriConfig::clear_ipversion() {
  _impl_.ipversion_ = 0;
}
inline ::ari::AriConfig_IP_VERSION AriConfig::_internal_ipversion() const {
  return static_cast< ::ari::AriConfig_IP_VERSION >(_impl_.ipversion_);
}
inline ::ari::AriConfig_IP_VERSION AriConfig::ipversion() const {
  // @@protoc_insertion_point(field_get:ari.AriConfig.ipVersion)
  return _internal_ipversion();
}
inline void AriConfig::_internal_set_ipversion(::ari::AriConfig_IP_VERSION value) {
  
  _impl_.ipversion_ = value;
}
inline void AriConfig::set_ipversion(::ari::AriConfig_IP_VERSION value) {
  _internal_set_ipversion(value);
  // @@protoc_insertion_point(field_set:ari.AriConfig.ipVersion)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ari

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ari::AriConfig_IP_VERSION> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ari::AriConfig_IP_VERSION>() {
  return ::ari::AriConfig_IP_VERSION_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ari_2eproto
